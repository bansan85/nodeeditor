variables:
  GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_PROJECT_PATH

.before-script-vcpkg-windows: &before-script-vcpkg-windows
  - Push-Location
  - git submodule update --init vcpkg-registry
  - if (-not (Test-Path -Path "$Env:VCPKG_LOCAL_GIT")) { git clone https://git.moduleus.com/common/sw/3rdparty/vcpkg.git $Env:VCPKG_LOCAL_GIT }
  - $baseline=Select-String -Path "vcpkg-configuration.json" -Pattern '"baseline":\s"(.+?)"' | ForEach-Object { $_.Matches.Groups[1].Value }
  - cd "$Env:VCPKG_LOCAL_GIT"
  - git fetch
  - git checkout $baseline
  - Pop-Location
  - $vcpkg_tag = (Get-Content $Env:VCPKG_LOCAL_GIT\scripts\vcpkg-tool-metadata.txt) | Select-String -Pattern '^VCPKG_TOOL_RELEASE_TAG=(.*)'  | %{$_.Matches.Groups[1].value}
  - $url="https://github.com/microsoft/vcpkg-tool/releases/download/$vcpkg_tag/vcpkg.exe"
  - $destination="$Env:VCPKG_CACHE_PATH\vcpkg-$vcpkg_tag.exe"
  - if(-not(Test-Path $destination)){Invoke-WebRequest -Uri $url -OutFile $destination}
  - Copy-Item $destination "$Env:VCPKG_LOCAL_GIT\vcpkg.exe"
  - $Env:LOCALAPPDATA = $Env:GITLAB_LOCALAPPDATA

.before-script-vcpkg-linux: &before-script-vcpkg-linux
  - git submodule update --init vcpkg-registry
  - if [ ! -d $VCPKG_LOCAL_GIT ]; then git clone https://git.moduleus.com/common/sw/3rdparty/vcpkg.git $VCPKG_LOCAL_GIT || exit 1; fi
  - baseline=$(grep -Po '"baseline":\s"\K[^"]+' vcpkg-configuration.json)
  - cd "$VCPKG_LOCAL_GIT"
  - git fetch
  - git checkout $baseline
  - cd -
  - vcpkg_tag=$(sed -n 's/^VCPKG_TOOL_RELEASE_TAG=\(.*\)/\1/p' < "$VCPKG_LOCAL_GIT/scripts/vcpkg-tool-metadata.txt")
  - destination="$VCPKG_CACHE_PATH/vcpkg-$vcpkg_tag"
  - if [ ! -f "$destination" ]; then wget -O "$destination" "https://github.com/microsoft/vcpkg-tool/releases/download/$vcpkg_tag/vcpkg-glibc" || exit 1; chmod +x "$destination"; fi
  - cp $destination "$VCPKG_LOCAL_GIT/vcpkg" || exit 1

.after-script-clean-vcpkg-windows: &after-script-clean-vcpkg-windows
  - Remove-Item -LiteralPath "$Env:VCPKG_BUILDTREE" -Force -Recurse
  - Remove-Item -LiteralPath "$Env:VCPKG_LOCAL_GIT/packages" -Force -Recurse

.after-script-clean-vcpkg-linux: &after-script-clean-vcpkg-linux
  - rm -Rf "$VCPKG_LOCAL_GIT/buildtrees"
  - rm -Rf "$VCPKG_LOCAL_GIT/packages"

workflow:
  rules:
    - if: $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE != "merge_request_event"

stages:
  - build
  - format
#  - test
#  - install
#  - tag

format:clang-format:
  stage: format
  tags:
    - ubuntu
    - clang-format
  script:
    - find . -type f -name "*.cpp" -or -name "*.cc" -or -name "*.hpp" -or -name "*.h" |xargs clang-format-17 --style=file --dry-run --Werror
  dependencies: []

format:cmake-format:
  stage: format
  tags:
    - ubuntu
    - cmake-format
  script:
    - find . -name "CMakeLists.txt" | xargs cmake-format -i
    - if [ -n "$(git diff-index --name-only HEAD --)" ]; then echo "Please, format your CMake files."; echo "$(git diff-index --name-only HEAD --)"; exit 1; fi
  dependencies: []

#format:clang-tidy:
#  stage: format
#  tags:
#    - ubuntu
#  script:
#    - cd CI
#    - run-clang-tidy || exit 1
#  dependencies:
#    - build:ubuntu-static

format:iwyu:
  stage: format
  tags:
    - ubuntu
    - iwyu
  script:
    - cd CI
    - perl -0777 -i.original -pe 's/,\n\{\n.*\n.*moc.*\.cpp",\n.*moc.*\.cpp"\n\}//g' compile_commands.json
    - perl -0777 -i.original -pe 's/\{\n.*\n.*moc.*\.cpp",\n.*moc.*\.cpp"\n\},\n//g' compile_commands.json
    - perl -0777 -i.original -pe 's/,\n\{\n.*\n.*qmlcache.*\.cpp",\n.*qmlcache.*\.cpp"\n\}//g' compile_commands.json
    - perl -0777 -i.original -pe 's/\{\n.*\n.*qmlcache.*\.cpp",\n.*qmlcache.*\.cpp"\n\},\n//g' compile_commands.json
    - perl -0777 -i.original -pe 's/,\n\{\n.*\n.*qmltyperegistrations.*\.cpp",\n.*qmltyperegistrations.*\.cpp"\n\}//g' compile_commands.json
    - perl -0777 -i.original -pe 's/\{\n.*\n.*qmltyperegistrations.*\.cpp",\n.*qmltyperegistrations.*\.cpp"\n\},\n//g' compile_commands.json
    - iwyu_tool.py -p . -j $NUM_PARALLEL -- -Xiwyu --mapping_file="$(pwd)/../.iwyu-imp" -Xiwyu --mapping_file="$(pwd)/../.stl.c.headers.imp" -Xiwyu --no_fwd_decls > iwyu_tool.log
    - fix_includes.py --nosafe_headers < iwyu_tool.log
    - if [[ `git status --porcelain` ]]; then exit 1; fi
  dependencies:
    - build:ubuntu-static
  allow_failure: true
  artifacts:
    when: on_failure
    paths:
      - CI/iwyu_tool.log
    expire_in: 1 day

build:windows-static:
  stage: build
  tags:
    - win10
    - build
  before_script:
    - *before-script-vcpkg-windows
  script:
    - cmake.exe -S . -B CI -G "Visual Studio 17 2022" -A x64 -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" -DBUILD_SHARED_LIBS=OFF -DCMAKE_TOOLCHAIN_FILE:PATHFILE="$Env:VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows-static-md-release-env -DVCPKG_HOST_TRIPLET=x64-windows-static-md-release-env -DVCPKG_INSTALL_OPTIONS=--x-buildtrees-root="$Env:VCPKG_BUILDTREE"  -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets
    - cmake.exe --build CI --config Release -- /p:CL_MPcount=$NUM_PARALLEL
  after_script:
    - *after-script-clean-vcpkg-windows

build:windows-shared:
  stage: build
  tags:
    - win10
    - build
  before_script:
    - *before-script-vcpkg-windows
  script:
    - cmake.exe -S . -B CI -G "Visual Studio 17 2022" -A x64 -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" -DBUILD_SHARED_LIBS=ON -DCMAKE_TOOLCHAIN_FILE:PATHFILE="$Env:VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows-release-env -DVCPKG_HOST_TRIPLET=x64-windows-release-env -DVCPKG_INSTALL_OPTIONS=--x-buildtrees-root="$Env:VCPKG_BUILDTREE" -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets
    - cmake.exe -S . -B CI -G "Visual Studio 17 2022" -A x64 -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" -DBUILD_SHARED_LIBS=ON -DCMAKE_TOOLCHAIN_FILE:PATHFILE="$Env:VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows-release-env -DVCPKG_HOST_TRIPLET=x64-windows-release-env -DVCPKG_INSTALL_OPTIONS=--x-buildtrees-root="$Env:VCPKG_BUILDTREE" -DVCPKG_MANIFEST_INSTALL:BOOL=OFF -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets
    - cmake.exe --build CI --config Release -- /p:CL_MPcount=$NUM_PARALLEL
  after_script:
    - *after-script-clean-vcpkg-windows

build:ubuntu-static:
  stage: build
  tags:
    - ubuntu
    - build
  before_script:
    - *before-script-vcpkg-linux
  script:
    - cmake -S . -B CI -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" -DBUILD_SHARED_LIBS=OFF -DCMAKE_TOOLCHAIN_FILE:PATHFILE="$VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-linux-release -DVCPKG_HOST_TRIPLET=x64-linux-release -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets
    - cmake --build CI --config Release --parallel $NUM_PARALLEL
  after_script:
    - *after-script-clean-vcpkg-linux
  artifacts:
    paths:
      - CI/compile_commands.json
      - CI/vcpkg_installed/x64-linux-release/include
    expire_in: 1 day

build:ubuntu-shared:
  stage: build
  tags:
    - ubuntu
    - build
  before_script:
    - *before-script-vcpkg-linux
  script:
    - cmake -S . -B CI -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" -DBUILD_SHARED_LIBS=ON -DCMAKE_TOOLCHAIN_FILE:PATHFILE="$VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-linux-dynamic-release -DVCPKG_HOST_TRIPLET=x64-linux-dynamic-release -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets
    - cmake --build CI --config Release --parallel $NUM_PARALLEL
  after_script:
    - *after-script-clean-vcpkg-linux
